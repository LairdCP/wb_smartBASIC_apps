//******************************************************************************
// Laird Technologies (c) 2014
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//
//	laird

//******************************************************************************
// Definitions
//******************************************************************************

// Number of connections
#define UNIX    0
#define TCPIP   1

#define BTCSPPOPEN                  100
#define BTCSPPCLOSE                 101
#define BTCSPPWRITE                 102
#define BTCSPPREAD                  103
#define BTCSPPCONNECT               104
#define BTCSPPDISCONNECT            105
#define BTCINQUIRYCONFIG            106
#define BTCINQUIRYSTART             107
#define BTCINQUIRYCANCEL            108
#define BTCGETPAIRREQUESTBDADDR     109
#define BTCSENDPAIRRESP             110
#define BTCSENDPINRESP              111
#define BTCSAVEPAIRING              112
#define BTCPAIR                     113
#define BTCDISCOVERYCONFIG          114
#define BTCSETDISCOVERABLE          115
#define BTCSETCONNECTABLE           116
#define BTCSETPAIRABLE              117
#define BTCGETBDADDRFROMHANDLE      118
#define BTCGETHANDLEFROMBDADDR      119
#define BTCINQUIRYGETREPORT         120
#define BTCGETPINREQUESTBDADDR      121
#define BTCSETFRIENDLYNAME          122
#define BTCGETFRIENDLYNAME          123
#define BTCBONDSTAT                 124
#define SOCKETOPENSOCK              125
#define SOCKETCLOSESOCK             126
#define SOCKETSEND                  127
#define SOCKETREADDATA              128
#define STREAMBRIDGE                129
#define STREAMUNBRIDGE              130
#define STREAMGETSPPHANDLE          131
#define STREAMGETSOCKETHANDLE       132
#define BTCGETMACADDRESS            133


#define EV_BTCSTART                  200
#define EV_SPPCONN                   201
#define EV_BTC_SPP_CONN_TIMEOUT      202
#define EV_BTC_SPP_DATA_RECEIVED     203
#define EV_SPPTXEMPTY                204
#define EV_SPPDISCON                 205
#define EV_BTC_PAIR_REQUEST          206
#define EV_BTC_PIN_REQUEST           207
#define EV_BTC_PAIR_RESULT           208
#define EV_INQRESP                   209
#define EV_BTC_INQUIRY_TIMEOUT       210
#define EV_BTC_DISCOV_TIMEOUT        211
#define EV_SOCKET_DATA_RECEIVED      212
#define EV_SOCKETCREATED             213
#define EV_SOCKETCLOSED              214
#define EV_BTCEND                    250

#define MSG_INQRESP                  301

//******************************************************************************
// Global Variable Declarations
//******************************************************************************


// global variables
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dim rc							// response code
dim gHandle
dim path$ as STRING
path$ = "/tmp/lrdbt1"
dim rspType
dim handle
dim hSpp

//******************************************************************************
// Initialise Global Variable
//******************************************************************************

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
// Display the error message
//==============================================================================
sub AssertResCode(resCode)
	if rc !=0 then
		//print "error: ";integer.h' rc;"\n"
	endif
endsub

//==============================================================================
// This is the first subroutine called when the program starts
//==============================================================================
sub Initialise()

endsub

function TokenizeEvent(byref token$ as string)
    dim rc : rc = 0
    dim sVar$
    sVar$ = "/24" + token$ + "/24"
    token$ = sVar$
endfunc rc

function HandlerSppConn(hConn, result) as integer
    dim event,rsp$,sConn$,sResult$ : event=EV_SPPCONN
    SPRINT #rsp$,event
    SPRINT #sConn$,hConn
    SPRINT #sResult$,result
    rsp$ = rsp$ + " " + sConn$ + " " + sResult$
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function HandlerSppDiscon(portHndl)
    dim event,rsp$,sPortHndl$,sResult$ : event=EV_SPPDISCON
    SPRINT #rsp$,event
    SPRINT #sPortHndl$,portHndl
    rsp$ = rsp$ + " " + sPortHndl$
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function HandlerSppTxEmpty(hndl)
    dim event,rsp$ : event=EV_SPPTXEMPTY
    SPRINT #rsp$,event
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1


function HandlerRxData()
    dim event, rsp$ : event = EV_BTC_SPP_DATA_RECEIVED
    SPRINT #rsp$, event
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function HandlerSppConnTO()
    dim event,rsp$ : event = EV_BTC_SPP_CONN_TIMEOUT
    SPRINT #rsp$, event
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function HandlerDiscTimeout()
    dim event,rsp$ : event=EV_BTC_DISCOV_TIMEOUT
    SPRINT #rsp$,event
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function HandlerPinRequest()
    dim event,rsp$ : event = EV_BTC_PIN_REQUEST
    dim eventStr$, mac$, rc, rcStr$
    SPRINT #eventStr$, event
    rc=BtcGetPinRequestBDAddr(mac$)
    SPRINT #rcStr$, rc
    mac$ = StrHexize$(mac$)
    if rc==0 then
        rsp$ = eventStr$ + " " + rcStr$ + " " + mac$
    else
        rsp$ = eventStr$ + " " + rcStr$
    endif
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function HandlerPairRequest()
    dim event,rsp$ : event = EV_BTC_PAIR_REQUEST
    dim eventStr$, mac$, rc, rcStr$
    SPRINT #eventStr$, event
    rc=BtcGetPairRequestBDAddr(mac$)
    SPRINT #rcStr$, rc
    mac$ = StrHexize$(mac$)
    if rc==0 then
        rsp$ = eventStr$ + " " + rcStr$ + " " + mac$
    else
        rsp$ = eventStr$ + " " + rcStr$
    endif
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function HandlerPairRes(nRes)
    dim event,rsp$ : event = EV_BTC_PAIR_RESULT
    dim eventStr$, rcStr$
    SPRINT #eventStr$, event
    SPRINT #rcStr$, nRes
    rsp$ = eventStr$ + " " + rcStr$
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function HandlerScanTO()
    dim event,rsp$ : event=EV_BTC_INQUIRY_TIMEOUT
    SPRINT #rsp$,event
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function HandlerBtcInqTimOut() as integer
    dim event,rsp$ : event=EV_BTC_INQUIRY_TIMEOUT
    SPRINT #rsp$,event
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1

'//Comes here when inquiry data is ready to be read
function HandlerInqResp(respType) as integer
    dim event,rsp$ : event = MSG_INQRESP
    dim marker$, eventStr$, resp$, rsi$, ad$, adr$, dta$, ndx, rsi, bdaddr$, EIR$, tag

    SPRINT #eventStr$, event
    marker$ = " "
    SPRINT #resp$,respType
    rsp$ = eventStr$ + marker$ + resp$

    rc = BtcInquiryGetReport(ad$,dta$,ndx,rsi)
    if strcmp(adr$,ad$)!= 0 then
        bdaddr$ = StrHexize$(ad$)
        rsp$ = rsp$ + marker$ + bdaddr$

        if respType > 0 then
            SPRINT #rsi$, rsi
            rsp$ = rsp$ + marker$ + rsi$

            if respType == 2 then
                EIR$ = StrHexize$(dta$)
                dim tg$

                rsp$ = rsp$ + marker$ + EIR$

                while BtcGetEIRbyIndex(ndx,dta$,tag,ad$)==0
                    //write tag value as hex to string tg$
                    sprint #tg$,integer.h'tag

                    //hexize eir tag data if not a shortened or complete local name
                    if tag < 0x08 || tag > 0x09 then
                        ad$ = StrHexize$(ad$)
                    else
                        StrDeescape(ad$)
                        ad$ = "/22" + ad$ + "/22"
                    endif

                    //print the last 2 hex digits of the tag, and the data
                    if strlen(ad$)!=0 then
                        rsp$ = rsp$ + marker$ + RIGHT$(tg$,2)
                        rsp$ = rsp$ + marker$ + ad$

                    endif
                    ndx=ndx+1

                endwhile
            endif
        endif
    endif
    rc = TokenizeEvent(rsp$)
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function DeTokenizeStr(byref deToken$ as string)
    dim rc : rc = 1
    dim pos, len, newLen
    dim sTok$ : sTok$ = "/22"
    pos = STRPOS(deToken$, sTok$, 0)
    if pos == 1 then
        StrShiftLeft(deToken$,4)
        len = strlen(deToken$)
        newLen = len - 3
        deToken$ = LEFT$(deToken$, newLen)
        rc = 0
    endif
endfunc rc

function TokenizeStr(byref token$ as string)
    dim rc : rc = 0
    dim sVar$
    sVar$ = "/22" + token$ + "/22"
    token$ = sVar$
endfunc rc

function TokenizeMssg(byref token$ as string)
    dim rc : rc = 0
    dim sVar$
    sVar$ = "/23" + token$ + "/23"
    token$ = sVar$
endfunc rc

function HandlerSocketCreated(nHandle) as integer
    dim event,rsp$,handleRsp$: event=EV_SOCKETCREATED

    if gHandle == 0 then
	gHandle = nHandle
	exitfunc 2
    endif
    SPRINT #rsp$,event
    sprint #handleRsp$,nHandle
    rsp$ = rsp$ + " " + handleRsp$
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function HandlerSocketClosed(nHandle) as integer
    dim event,rsp$,handleRsp$: event=EV_SOCKETCLOSED
    dim rc
    rc = SocketOpenSock(path$,0,1,1,handle)
    rc = BtcSppOpen(hSpp)
    SPRINT #rsp$,event
    sprint #handleRsp$,nHandle
    gHandle = 0
    rsp$ = rsp$ + " " + handleRsp$
    rc = SocketSend(gHandle,rsp$)
endfunc 1

function SocketRx(nHandle,nLength)
    dim event,rsp$,handleRsp$,lengthRsp$ : event=EV_SOCKET_DATA_RECEIVED
    SPRINT #rsp$,event
    sprint #handleRsp$,nHandle
    sprint #lengthRsp$,nLength
    rsp$ = rsp$ + " " + handleRsp$ + " " + lengthRsp$
    rc = SocketSend(gHandle,rsp$)
endfunc 1


'//==============================================================================
'// Called after SendMsgApp is called. Used to switch between command, rfcomm, and
'// gatttool listen modes
'//==============================================================================
function HandlerRxSocket(nHandle,nLength) as integer
    dim nSock : nSock = 0
    dim nSize : nSize = 0
    dim msg$
    dim rsp$
    dim token, tknlen,nLen
    dim var1, var2, var3, var4
    dim sVar1$, sVar2$, sVar3$, sVar4$
    dim tokenStr$,sLen$

    if gHandle == 0 then
        gHandle = nHandle
    elseif gHandle != nHandle then
        exitfunc SocketRx(nHandle,nLength)
    endif
        rc = SocketReadData(msg$,nSock,nSize)
	    tknlen = ExtractIntToken(msg$,token)
        rc=1

        SELECT token
        CASE BTCINQUIRYCONFIG
            tknlen = ExtractIntToken(msg$,var1)
            tknlen = ExtractIntToken(msg$,var2)
            rc = BtcInquiryConfig(var1, var2)
            SPRINT #rsp$,rc

        CASE BTCINQUIRYSTART
            tknlen = ExtractIntToken(msg$,var1)
            rc = BtcInquiryStart(var1)
            SPRINT #rsp$,rc

        CASE BTCINQUIRYCANCEL
            tknlen = ExtractIntToken(msg$,var1)
            rc = BtcInquiryCancel()
            SPRINT #rsp$,rc

        CASE BTCGETPAIRREQUESTBDADDR
            rc=BtcGetPairRequestBDAddr(sVar1$)
            sVar1$ = StrHexize$(sVar1$)
            SPRINT #rsp$,rc
            rsp$ = rsp$ + " " + sVar1$

        CASE BTCSENDPAIRRESP
            tknlen = ExtractIntToken(msg$,var1)
            rc=BtcSendPairResp(var1)
            SPRINT #rsp$,rc

        CASE BTCSENDPINRESP
            tknlen = ExtractStrToken(msg$,sVar1$)
            rc=BtcSendPINResp(sVar1$)
            SPRINT #rsp$,rc

        CASE BTCSAVEPAIRING
            tknlen = ExtractIntToken(msg$,var1)
            rc=BtcSavePairings(var1)
            SPRINT #rsp$,rc

        CASE BTCPAIR
            tknlen = ExtractStrToken(msg$,sVar1$)
            tknlen = ExtractIntToken(msg$,var1)
            sVar1$ = StrDehexize$(sVar1$)
            rc=BtcPair(sVar1$, var1)
            SPRINT #rsp$,rc

        CASE BTCDISCOVERYCONFIG
            tknlen = ExtractIntToken(msg$,var1)
            tknlen = ExtractIntToken(msg$,var2)
            rc=BtcDiscoveryConfig(var1,var2)
            SPRINT #rsp$,rc

        CASE BTCSETDISCOVERABLE
            tknlen = ExtractIntToken(msg$,var1)
            tknlen = ExtractIntToken(msg$,var2)
            rc=BtcSetDiscoverable(var1,var2)
            SPRINT #rsp$,rc

        CASE BTCSETCONNECTABLE
            tknlen = ExtractIntToken(msg$,var1)
            rc=BtcSetConnectable(var1)
            SPRINT #rsp$,rc

        CASE BTCSETPAIRABLE
            tknlen = ExtractIntToken(msg$,var1)
            rc=BtcSetPairable(var1)
            SPRINT #rsp$,rc

        CASE BTCSPPCONNECT
            tknlen = ExtractStrToken(msg$,sVar1$)
            sVar1$ = StrDehexize$(sVar1$)
            rc = BtcSppConnect(sVar1$)
            sprint #rsp$,rc

        CASE BTCSPPDISCONNECT
            tknlen = ExtractIntToken(msg$,var1)
            rc = BtcSppDisconnect(var1)
            sprint #rsp$,rc

        CASE SOCKETOPENSOCK
            tknlen = ExtractIntToken(msg$,var1)
            tknlen = ExtractIntToken(msg$,var2)
            tknlen = ExtractIntToken(msg$,var3)
            tknlen = ExtractStrToken(msg$,sVar1$)
            do
                tknlen = ExtractStrToken(msg$,sVar2$)
                if tknlen > 0 then
                    sVar1$ = sVar1$ + sVar2$
                endif
            until tknlen==0
            rc = SocketOpenSock(sVar1$,var1,var2,var3,var4)
            sprint #rsp$,rc
            sprint #sVar4$, var4
            rsp$ = rsp$ + " " + sVar4$

        CASE SOCKETCLOSESOCK
            tknlen = ExtractIntToken(msg$,var1)
            rc = SocketCloseSock(var1)
            sprint #rsp$,rc

        CASE SOCKETSEND
            tknlen = ExtractIntToken(msg$,var1)
            tknlen = ExtractStrToken(msg$,sVar1$)
            rc = SocketSend(var1,sVar1$)
            sprint #rsp$,rc

        CASE SOCKETREADDATA
            tknlen = ExtractIntToken(msg$,var1)
            rc=SocketReadData(sVar1$,var1,var2)
            sprint #rsp$,rc
            sprint #sVar2$,var2
            rsp$ = rsp$ + " " + sVar2$ + " " + sVar1$

        CASE STREAMBRIDGE
            tknlen = ExtractIntToken(msg$,var1)
            tknlen = ExtractIntToken(msg$,var2)
            rc=StreamBridge(var1,var2,var3)
            sprint #rsp$,rc
            sprint #sVar3$,var3
            rsp$ = rsp$ + " " + sVar3$

        CASE STREAMUNBRIDGE
            tknlen = ExtractIntToken(msg$,var1)
            rc=StreamUnBridge(var1)
            sprint #rsp$,rc

        CASE BTCGETBDADDRFROMHANDLE
            dim addr$
            tknlen = ExtractIntToken(msg$,var1)
            rc=BtcGetBDAddrFromHandle(var1, addr$)
            SPRINT #rsp$,rc
            addr$ = StrHexize$(addr$)
            rsp$ = rsp$ + " " + addr$

        CASE BTCGETHANDLEFROMBDADDR
            dim handle, handleStr$
            tknlen = ExtractStrToken(msg$,tokenStr$)
            tokenStr$ = StrDehexize$(tokenStr$)
            rc=BtcGetHandleFromBDAddr(tokenStr$, handle)
            SPRINT #rsp$,rc
            SPRINT #handleStr$,handle
            rsp$ = rsp$ + " " + handleStr$

        CASE BTCGETPINREQUESTBDADDR
            tknlen = ExtractStrToken(msg$,tokenStr$)
            rc=BtcSendPINResp(tokenStr$)
            SPRINT #rsp$,rc

        CASE BTCSPPWRITE
            tknlen = ExtractIntToken(msg$,var1)
            rc = DeTokenizeStr(msg$)
            sVar1$ = msg$
            rc = BtcSppWrite(var1, sVar1$, nLen)
            sprint #rsp$,rc
            sprint #sLen$,nLen
            rsp$ = rsp$ + " " + sLen$

        CASE BTCSPPREAD
            rc = BtcSppRead(var2, sVar1$,nLen)
            sprint #rsp$,rc
            sprint #sLen$,nLen
            sprint #sVar2$,var2
            if rc == 0 then
                var3 = TokenizeStr(sVar1$)
                rsp$ = rsp$ + " " + sVar2$ + " " + sVar1$ + " " + sLen$
            endif

        CASE STREAMGETSPPHANDLE
            tknlen = ExtractIntToken(msg$,var1)
            rc=StreamGetSPPHandle(var1,var2)
            sprint #rsp$,rc
            sprint #sVar2$,var2
            rsp$ = rsp$ + " " + sVar2$

        CASE STREAMGETSOCKETHANDLE
            tknlen = ExtractIntToken(msg$,var1)
            rc=StreamGetSocketHandle(var1,var2)
            sprint #rsp$,rc
            sprint #sVar2$,var2
            rsp$ = rsp$ + " " + sVar2$

        CASE BTCSETFRIENDLYNAME
            rc = DeTokenizeStr(msg$)
            sVar1$ = msg$
            if rc == 0 then
                rc=BtcSetFriendlyName(sVar1$)
            endif
            sprint #rsp$,rc

        CASE BTCGETFRIENDLYNAME
            rc=BtcGetFriendlyName(tokenStr$)
            if rc == 0 then
                var1 = TokenizeStr(tokenStr$)
            endif
            SPRINT #rsp$,rc
            var1 = STRLEN(tokenStr$)
            SPRINT #sVar1$,var1
            rsp$ = rsp$ + " " + tokenStr$ + " " + sVar1$

        CASE BTCBONDSTAT
            rc=BtcBondingStats(var1, var2)
            if rc > 0 then
                rc = 0
                SPRINT #rsp$,rc
            endif
            sprint #sVar1$,var1
            sprint #sVar2$,var2
            rsp$ = rsp$ + " " + sVar1$ + " " + sVar2$

        CASE BTCGETMACADDRESS
            sVar1$ = SYSINFO$(4)
            sVar1$ = right$(sVar1$, 6)
            sVar1$ = StrHexize$(sVar1$)
            rc = 0
            SPRINT #rsp$,rc
            rsp$ = rsp$ + " " + sVar1$

        CASE ELSE
            //print "\nWrong BT command"

    ENDSELECT
    var3 = TokenizeMssg(rsp$)
    rc = SocketSend(nHandle,rsp$)
endfunc 1

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
// Data received over the UART. Process the data accordingly
OnEvent EVSOCKET_DATA_RECEIVED      	call HandlerRxSocket
OnEvent EVINQRESP               	call HandlerInqResp
OnEvent EVBTC_INQUIRY_TIMEOUT   	call HandlerBtcInqTimOut
OnEvent EVBTC_PIN_REQUEST       	call HandlerPinRequest
OnEvent EVBTC_PAIR_REQUEST      	call HandlerPairRequest
OnEvent EVBTC_PAIR_RESULT       	call HandlerPairRes
Onevent EVBTC_DISCOV_TIMEOUT    	call HandlerDiscTimeout
OnEvent EVSPPCONN               	call HandlerSppConn
OnEvent EVSPPDISCON             	call HandlerSppDiscon
OnEvent EVBTC_SPP_DATA_RECEIVED 	call HandlerRxData
OnEvent EVBTC_SPP_CONN_TIMEOUT  	call HandlerSppConnTO
OnEvent EVSOCKETCREATED         	call HandlerSocketCreated
OnEvent EVSOCKETCLOSED          	call HandlerSocketClosed
OnEvent EVSPPTXEMPTY                call HandlerSppTxEmpty


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Open a socket and start a listener
rc=SocketOpenSock(path$,0,1,1,handle)

rc=BtcSppOpen(hSpp)


//------------------------------------------------------------------------------
// Wait for a synchronous event.
//------------------------------------------------------------------------------
WaitEvent
